AWSTemplateFormatVersion: 2010-09-09
Description: Create ALB that can be modified by Service Catalog provisioning requests

Parameters:
  DomainName:
    Description: 'Domain or string to register new CNAME for ALB'
    Type: String
  SubDomainName:
    Description: 'Sub-domain name for DNS record and cert'
    Type: String
#   Default: "*" #can default to wildcard cert, but require subdomain for now
# SSLCertificateArn:
#   Description: 'ARN of Certificate to attach to ALB'
#   Type: String
  VpcSubnet:
    Description: 'Existing public VPC subnet name to run the instance in'
    Type: String
    Default: PublicSubnet
    ConstraintDescription: >-
      Allowed values (PublicSubnet, PublicSubnet1, PublicSubnet2)
    AllowedValues:
      - PublicSubnet
      - PublicSubnet1
      - PublicSubnet2
  VpcName:
    Description: 'Name of an existing VPC to run the instance in'
    Type: String

Resources:

  KmsDecryptManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ReadAccess
            Action:
              - 'kms:ListKeys'
              - 'kms:ListAliases'
              - 'kms:DescribeKey'
              - 'kms:ListKeyPolicies'
              - 'kms:GetKeyPolicy'
              - 'kms:GetKeyRotationStatus'
              - 'iam:ListUsers'
              - 'iam:ListRoles'
            Effect: Allow
            Resource: !ImportValue 
              'Fn::Sub': '${AWS::Region}-${AWS::StackName}-KmsKeyArn'
          - Sid: DecryptAccess
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
            Effect: Allow
            Resource: !ImportValue 
              'Fn::Sub': '${AWS::Region}-${AWS::StackName}-KmsKeyArn'

  SsmManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: GetParamAccess
            Action:
              - 'ssm:*'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:ssm:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':'
                - 'parameter/'
                - !Ref AWS::StackName
                - '/*'

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Join
        - '-'
        - - !Ref AWS::StackName
          - "KmsKey"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
                - !ImportValue 
                    'Fn::Sub': '${AWS::Region}-bootstrap-CfServiceRoleArn'
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          -
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref AWS::AccountId
                    - ':root'
                - !ImportValue 
                    'Fn::Sub': '${AWS::Region}-bootstrap-CfServiceRoleArn'
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"

  KmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join
        - ''
        - - 'alias/'
          - !Ref AWS::StackName
          - '/KmsKey'
      TargetKeyId: !Ref KmsKey

  DomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join
        - '.'
        - - !Ref SubDomainName
          - !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Join
            - '.'
            - - !Ref SubDomainName
              - !Ref DomainName
          ValidationDomain: !Ref DomainName
      ValidationMethod: "DNS"

  ALBListenerRuleFunctionRole: # execute lambda function with this role
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref SsmManagedPolicy
        - !Ref KmsDecryptManagedPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
#       - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - !Ref ALBListenerRuleWritePolicy

  ALBListenerRuleWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ElbFullAccess
            Effect: 'Allow'
            Action:
              - 'elasticloadbalancing:*'
            Resource: !Ref ApplicationLoadBalancer

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Add ingress to 443 from ALB'
      VpcId:  !ImportValue
        'Fn::Sub': '${AWS::Region}-${VpcName}-VPCId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443 
          ToPort: 443 
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow ingress to 443 from everywhere'
      VpcId:  !ImportValue
        'Fn::Sub': '${AWS::Region}-${VpcName}-VPCId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443 
          ToPort: 443 
          CidrIp: 0.0.0.0/0

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
        Certificates: !Ref DomainCertificate
        DefaultActions:
          - Type: redirect
            Order: 50000
            RedirectToDefaultDomain:
              Host: !Ref DomainName
              StatusCode: HTTP_301
        Port: 443 
        Protocol: HTTPS 

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - Ref: VpcSubnet
      SecurityGroups:
      - Ref: ALBSecurityGroup

  ConnectDNSRecord: #TODO should we output a connection string based on this?
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      Name: !Ref DomainName
      Type: CNAME
      TTL: '900'
      ResourceRecords:
      - !GetAtt ApplicationLoadBalancer.DNSName

Outputs:
  ALBListenerRuleFunctionRole:
    Description: 'Role reference for the Ruler lambda'
    Value: !Ref ALBListenerRuleFunctionRole
    Export: 
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ALBListenerRuleFunctionRole'
  ALBListenerRuleFunctionRole:
    Description: 'Role ARN for the Ruler lambda'
    Value: !GetAtt ALBListenerRuleFunctionRole.Arn
    Export: 
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ALBListenerRuleFunctionRole'
  ALBSecurityGroup:
    Description: 'Security group allowing public ingress to the ALB'
    Value: !Ref ALBSecurityGroup
    Export: 
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ALBSecurityGroup'
  ApplicationLoadBalancerDNSName:
    Description: 'Public DNS name of the ALB'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export: 
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ApplicationLoadBalancerDNSName'
  ApplicationLoadBalancer:
    Description: 'Application Load Balancer'
    Value: !Ref ApplicationLoadBalancer
    Export: 
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ApplicationLoadBalancer'
  ApplicationLoadBalancerARN:
    Description: 'Application Load Balancer Arn'
    Value: !Ref ApplicationLoadBalancer
    Export: 
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ApplicationLoadBalancerArn'
  ApplicationLoadBalancerDirectHTTPSConnectionURI: 
    Description: 'Connection string for ALB'
    Value:
      !Join
      - ''
      - - https://
        - Fn::GetAtt:
          - ApplicationLoadBalancer
          - DNSName
    Export: 
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ApplicationLoadBalancerDirectHTTPSConnectionURI'
  ConnectionURI:
    Value: !Join 
           - ''
           - - https://
             - !Ref SubDomainName
             - '.'
             - !Ref DomainName
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-ConnectionURI'
  DomainCertificateArn:
    Value: !Ref DomainCertificate
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-DomainCertificateArn'
  EC2SecurityGroup:
    Description: 'Security group allowing ingress to an instance from the ALB'
    Value: !Ref EC2SecurityGroup
    Export: 
      Name: !Sub '${AWS::Region}-${AWS::StackName}-EC2SecurityGroup'
  KmsKey:
    Value: !Ref KmsKey
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-KmsKey'
  KmsKeyAlias:
    Value: !Ref KmsKeyAlias
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-KmsKeyAlias'
  KmsKeyArn:
    Value: !GetAtt KmsKey.Arn
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-KmsKeyArn'
